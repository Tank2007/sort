                Recursion vc Iteration
books = [int(n) for n in input("Input a list of numbers").split()]

def pairs(books):
    if len(books) == 2:
        print(books[0] + books[1])
    else:
        mid = len(books) // 2 
        first_half = books[:mid]
        second_half = books[mid:]
        
        pairs(first_half)
        pairs(second_half)
pairs(books)


flowers = [int(n) for n in input("How many blossoms are on each tree?").split()]
def orchard(flowers):
    if len(flowers) == 1:
        print(flowers[0] * 3)
    else:
        mid = len(flowers) // 2
        first_half = flowers[:mid]
        second_half = flowers[mid:]

        orchard(first_half)
        orchard(second_half)
orchard(flowers)

def factorial(num):
    if (num == 1 or num == 0):
        return 1
    else:
        return (num * factorial(num - 1))
num = int(input())
print(factorial(num))


def add_list(my_list):
    if len(my_list) == 1:
        return my_list[0]
    else:
        return my_list[0] + add_list(my_list[1:])
print(add_list(list_of_nums))


final = []
def Fibonacci(num):
    if num <= 1:
        return num
    else:
        return(Fibonacci(num-1) + Fibonacci(num-2))
length = int(input("Enter numbers"))

for i in range(length):
    final.append(Fibonacci(i))
print(final)


                  Bubble sort



answer = int(input("Enter a number 0 - 100"))

arr = [10, 32, 4, 90, 15, 20, 89, 1, 3, 45, 42, 87, 91, 18, 25, 76, 38, 12]

arr.append(answer)

def bubbleSort(sort_list):
    n = len(sort_list)
    for i in range(n-1):
        for j in range(0, n-i-1):
            if sort_list[j] > sort_list[j+1]:
                sort_list[j], sort_list[j+1] = sort_list[j+1], sort_list[j]
    return sort_list

bubbleSort(arr)

print(arr)


                                   Selection Sort



answer = int(input("Enter a number 0 - 100"))

arr = [10, 32, 4, 90, 15, 20, 89, 1, 3, 45, 42, 87, 91, 18, 25, 76, 38, 12]

arr.append(answer)

def selectionSort(sort_list):
    for i in range(len(sort_list)):
        smaller_index = i
        for j in range(i+1, len(sort_list)):
            if sort_list[smaller_index] > sort_list[j]:
                smaller_index = j
        sort_list[i], sort_list[smaller_index] = sort_list[smaller_index], sort_list[i]

selectionSort(arr)
print(arr)


                                      Insertion Sort
